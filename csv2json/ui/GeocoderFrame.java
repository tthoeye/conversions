/**
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import exceptions.CSVColumnCountException;
import io.CSVFileWriter;
import io.CSVReader;
import io.DataWriter;
import io.Geocoder;
import io.JSONWriter;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.filechooser.FileFilter;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.xpath.XPathExpressionException;
import mapping.CSVMapper;
import mapping.POIMapper;
import org.xml.sax.SAXException;

/**
 *
 * @author thoeyeth
 */
public class GeocoderFrame extends javax.swing.JFrame {
    
    private JFileChooser fc;
    private HashMap methods;
    private CSVTableModel fieldModel;
    private String lastDestinationFilter;
    private String lastSourceFilter;

    /**
     * Creates new form MainFrame
     */
    public GeocoderFrame() {
        this.fc = new JFileChooser();
        this.methods = new HashMap<String, String>();
        this.methods.put("test", "This is a testmethod");
        this.fieldModel = new CSVTableModel();
        this.lastDestinationFilter = null;
        this.lastSourceFilter = null;
        initComponents();
    }
    

        
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sourcePanel = new javax.swing.JPanel();
        sourceLabel = new javax.swing.JLabel();
        sourceText = new javax.swing.JTextField();
        sourceSelectButton = new javax.swing.JButton();
        destinationLabel = new javax.swing.JLabel();
        destinationText = new javax.swing.JTextField();
        destinationSelectButton = new javax.swing.JButton();
        fieldPanel = new javax.swing.JPanel();
        fieldScroller = new javax.swing.JScrollPane();
        fieldTable = new javax.swing.JTable();
        excludeFieldButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        closeButton = new javax.swing.JButton();
        geocodeButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        sourcePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("I/O"));

        sourceLabel.setText("Source File:");

        sourceText.setText("Select source...");

        sourceSelectButton.setText("Choose");
        sourceSelectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sourceSelectButtonActionPerformed(evt);
            }
        });

        destinationLabel.setText("Result File:");

        destinationText.setText("Select destination...");

        destinationSelectButton.setText("Choose");
        destinationSelectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                destinationSelectButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout sourcePanelLayout = new javax.swing.GroupLayout(sourcePanel);
        sourcePanel.setLayout(sourcePanelLayout);
        sourcePanelLayout.setHorizontalGroup(
            sourcePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sourcePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(sourcePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, sourcePanelLayout.createSequentialGroup()
                        .addComponent(sourceLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                    .addGroup(sourcePanelLayout.createSequentialGroup()
                        .addComponent(destinationLabel)
                        .addGap(15, 15, 15)))
                .addGroup(sourcePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(destinationText)
                    .addComponent(sourceText, javax.swing.GroupLayout.DEFAULT_SIZE, 393, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(sourcePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sourceSelectButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(destinationSelectButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        sourcePanelLayout.setVerticalGroup(
            sourcePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sourcePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(sourcePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sourceLabel)
                    .addComponent(sourceText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sourceSelectButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(sourcePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(destinationLabel)
                    .addComponent(destinationText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(destinationSelectButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        fieldPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Fields"));
        fieldPanel.setName("Fields"); // NOI18N

        fieldTable.setSelectionMode(ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        fieldTable.setModel(this.fieldModel);
        fieldTable.setDragEnabled(true);
        fieldTable.setDropMode(javax.swing.DropMode.INSERT_ROWS);
        fieldTable.setTransferHandler(new TableRowTransferHandler(fieldTable));
        fieldScroller.setViewportView(fieldTable);

        excludeFieldButton.setText("Exclude field");
        excludeFieldButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                excludeFieldButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("<html>Please drag the fields into the right order for geocoding. <br/>Fields can be excluded by clicking the \"Exclude field\" button</html>");

        javax.swing.GroupLayout fieldPanelLayout = new javax.swing.GroupLayout(fieldPanel);
        fieldPanel.setLayout(fieldPanelLayout);
        fieldPanelLayout.setHorizontalGroup(
            fieldPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fieldPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(fieldPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fieldScroller)
                    .addGroup(fieldPanelLayout.createSequentialGroup()
                        .addComponent(excludeFieldButton)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jLabel1))
                .addContainerGap())
        );
        fieldPanelLayout.setVerticalGroup(
            fieldPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fieldPanelLayout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fieldScroller, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(excludeFieldButton)
                .addContainerGap())
        );

        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        geocodeButton.setText("Geocode");
        geocodeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                geocodeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sourcePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(444, 444, 444)
                        .addComponent(geocodeButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(closeButton))
                    .addComponent(fieldPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(22, Short.MAX_VALUE)
                .addComponent(sourcePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(fieldPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(closeButton)
                    .addComponent(geocodeButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void sourceSelectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sourceSelectButtonActionPerformed
        fc.addChoosableFileFilter(new CSVFilter());
        //fc.setAcceptAllFileFilterUsed(false);
        int returnVal = fc.showOpenDialog(GeocoderFrame.this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            lastSourceFilter = fc.getFileFilter().getDescription();
            //This is where a real application would open the file.
            sourceText.setText(file.getAbsolutePath());
            try {
                CSVReader reader = new CSVReader(file);
                fieldModel.setCSVReader(reader);
            } catch (Exception x) {
                System.out.println("Error while importing file: " + x.getMessage());
            }
        } else {
            System.out.println("cancelled");
        }
    }//GEN-LAST:event_sourceSelectButtonActionPerformed

    private void excludeFieldButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_excludeFieldButtonActionPerformed
        int selected = this.fieldTable.getSelectedRowCount();
        int i = 0;
        while (i < selected) {
            this.fieldModel.removeRow(this.fieldTable.getSelectedRow());
            i++;
        }
    }//GEN-LAST:event_excludeFieldButtonActionPerformed

    private void geocodeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_geocodeButtonActionPerformed
        try {
            String delimiter = ";";
            String encapsulator = "";
            
            File destinationFile = new File(destinationText.getText());
            if (destinationFile.exists()) {
                //Custom button text
                Object[] options = {"Cancel", "Overwrite"};
                int n = JOptionPane.showOptionDialog(this,
                    "Destination file exists!\n"
                    + "Do you want to overwrite it?",
                    "File exists!",
                    JOptionPane.OK_CANCEL_OPTION,
                    JOptionPane.WARNING_MESSAGE,
                    null,
                    options,
                    options[0]);
                if (n != 1) {
                    return;
                }
            }
            
            // Geocode!
            List<String> reqdfields = new ArrayList<String>();
            for (int i = 0; i < fieldModel.getRowCount(); i++) {
                reqdfields.add((String)fieldModel.getValueAt(i, 0));
            }
            Geocoder coder = new Geocoder(reqdfields);
            CSVReader reader = fieldModel.getCSVReader();
            /*
            List<String> headers = reader.getHeaders();
            headers.add("lat");
            headers.add("lng");
            reader.setHeaders(headers);
            * */
            
            Map<String, Object> record;
            int i = 0;
            

            
            // Detect destination File Type
            if (lastDestinationFilter == new CitadelJSONFilter().getDescription()) {
                // Citadel JSON Format
                POIMapper mapper = new POIMapper(reader);            
                mapper.map(coder);
                Map<String, Object> document = mapper.getDocument();
                System.out.println("JSON mapped");
                DataWriter output = new JSONWriter(destinationFile);
                output.write(document, destinationFile);
            } else {
                // Ordinary CSV - Warning! highly inefficient!
                CSVMapper mapper = new CSVMapper(reader);            
                mapper.map(coder);
                System.out.println("CSV mapped");
                Map<String, Object> document = mapper.getDocument();
                System.out.print("size of resulting doc: " + document.keySet().size());
                DataWriter output = new  CSVFileWriter(destinationFile, encapsulator, delimiter);
                output.write(document, destinationFile);
            }
            
            
            Object[] options = {"OK"};
            int n = JOptionPane.showOptionDialog(this,
                "Geocoding successful",
                "Success!",
                JOptionPane.OK_OPTION,
                JOptionPane.PLAIN_MESSAGE,
                null,
                options,
                options[0]);
            
        } catch (Exception ex) {
            String message = ex.getMessage();
            Object[] options = {"OK"};
            int n = JOptionPane.showOptionDialog(this,
                "An error occurred while trying to write to the destination file indicated:\n"
                + message,
                "Cannot write!",
                JOptionPane.OK_OPTION,
                JOptionPane.ERROR_MESSAGE,
                null,
                options,
                options[0]);
        }
    }//GEN-LAST:event_geocodeButtonActionPerformed

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        System.exit(0);
    }//GEN-LAST:event_closeButtonActionPerformed

    private void destinationSelectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_destinationSelectButtonActionPerformed
        fc.resetChoosableFileFilters();
        fc.addChoosableFileFilter(new CSVFilter());
        fc.addChoosableFileFilter(new CitadelJSONFilter());
        /*
        FileFilter[] filters = fc.getChoosableFileFilters();
        int i = 0;
        for (FileFilter filter : filters) {
            if (filter instanceof CitadelJSONFilter) {
                continue;
            }
            i++;
        }
        if (i >= filters.length) {
            fc.addChoosableFileFilter(new CitadelJSONFilter());
        }
       */
        int returnVal = fc.showSaveDialog(GeocoderFrame.this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            destinationText.setText(file.getAbsolutePath());
            lastDestinationFilter = fc.getFileFilter().getDescription();
        } else {
            System.out.println("cancelled");
        }
    }//GEN-LAST:event_destinationSelectButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton closeButton;
    private javax.swing.JLabel destinationLabel;
    private javax.swing.JButton destinationSelectButton;
    private javax.swing.JTextField destinationText;
    private javax.swing.JButton excludeFieldButton;
    private javax.swing.JPanel fieldPanel;
    private javax.swing.JScrollPane fieldScroller;
    private javax.swing.JTable fieldTable;
    private javax.swing.JButton geocodeButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel sourceLabel;
    private javax.swing.JPanel sourcePanel;
    private javax.swing.JButton sourceSelectButton;
    private javax.swing.JTextField sourceText;
    // End of variables declaration//GEN-END:variables
}
